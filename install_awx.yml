---
# Based on various parts of:
# https://docs.docker.com/install/linux/docker-ce/ubuntu/
# https://github.com/ansible/awx/blob/devel/INSTALL.md
# https://docs.gitlab.com/omnibus/docker/
#
# Config of AWX based on these notes: (Don't use it as an install guide!!)
# https://www.howtoforge.com/how-to-install-ansible-awx-with-nginx-reverse-proxy-on-ubuntu-1804/

- name: Install prerequisites
  gather_facts: false
  hosts: all
  become: true
  tasks:
  - name: Install Python
    raw: test -e /usr/bin/python || (sudo apt -y update && sudo apt install -y python-minimal)
    changed_when: false
    failed_when: false

  - name: Gather facts
    setup:

  - name: Run a Full Upgrade
    apt:
      update_cache: yes
      upgrade: full
      autoremove: yes
      autoclean: yes
      force_apt_get: yes

  - name: Install the Docker GPG Key
    apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      id: 9DC858229FC7DD38854AE2D88D81803C0EBFCD88

  - name: Install the Docker repo
    apt_repository:
      repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
      state: present
      filename: docker-ce

  - name: Install required software via Apt
    apt:
      update_cache: yes
      name: ['docker-ce', 'docker-ce-cli', 'containerd.io', 'python-pip', 'nodejs', 'npm']
      force_apt_get: yes

  - name: Install pip packages
    pip:
      name: ['docker', 'docker-compose', 'ansible']

  - name: Install extra pip packages
    pip:
      name: "{{ item }}"
    loop:
    - ansible-tower-cli # Needed for the tower_* modules below

  - name: Install npm packages
    npm:
      name: npm
      global: yes
      state: latest

  - name: Check if Gitlab is up already
    uri:
      url: "http://127.0.0.1:1080/users/sign_in"
      follow_redirects: none
      method: GET
    register: _result
    failed_when: false
    changed_when: false

  - name: Record status
    set_fact:
      build_gitlab: "{{ _result.status <100 or _result.status > 399 }}"

  - name: Create Gitlab Container
    docker_container:
      name: gitlab
      image: gitlab/gitlab-ce:latest
      restart: yes
      state: started
      published_ports:
      - 0.0.0.0:1443:443
      - 0.0.0.0:1080:80
      - 0.0.0.0:2222:22
      hostname: gitlab
    when: build_gitlab

  # Based on https://gist.github.com/mikeifomin/67e233cd461331de16707ef59a07e372
  - name: Wait for gitlab to be up
    uri:
      url: "http://127.0.0.1:1080/users/sign_in"
      method: GET
    register: _result
    until: _result.status == 200
    retries: 240 # retry X times  
    delay: 5 # pause for X sec b/w each call
    when: build_gitlab

  - name: Define initial gitlab settings (users, projects, groups)
    set_fact:
      # Parts of this based on:
      # https://gitlab.com/gitlab-org/gitlab-ce/issues/58434
      # https://github.com/rgl/gitlab-vagrant/blob/master/provision.sh#L105-L119
      # User levels based on https://docs.gitlab.com/ee/api/members.html
      #
      # This block because the gitlab_* modules don't work with the current version of gitlab
      batch_gitlab_actions: |
        {# Root gitlab user #}
        /opt/gitlab/bin/gitlab-rails console production <<'EOF'
        u = User.first
        u.password_automatically_set = false
        u.password = '{{ password_key }}'
        u.password_confirmation = '{{ password_key }}'
        u.save!
        {# Create default group #}
        g = Group.create!(name: 'default', path: 'default')
        p = Project.create!(namespace: g, creator: u, path: 'default', name: 'default')
        nu = User.create!(username: \"awx\", name: \"AWX\", email: \"awx@gitlab.local\", password: \"{{ password_key }}\", password_confirmation: \"{{ password_key }}\", confirmed_at: Time.now, confirmation_token: nil)
        g.add_user(nu, 10)
        {# 10 = Guest level - basically read-only #}
        g.save!
        {% for user in users | dict2items %}
        nu = User.create!(username: \"{{ user.key }}\", name: \"{{ user.value }}\", email: \"{{ user.key }}@gitlab.local\", password: \"{{ password_key }}\", password_confirmation: \"{{ password_key }}\", confirmed_at: Time.now, confirmation_token: nil)
        g.add_user(nu, 50)
        {# 50 = Owner level #}
        g.save!
        {% endfor %}
        EOF
    when: build_gitlab

  - name: Run gitlab config command in gitlab
    raw: docker exec -i gitlab bash -c "{{ batch_gitlab_actions }}"
    failed_when: docker_exec.rc != 0
    register: docker_exec
    when: build_gitlab

  - name: Check if AWX is up
    uri:
      url: "http://127.0.0.1"
      follow_redirects: none
      method: GET
    register: _result
    failed_when: false
    changed_when: false

  - name: Record status
    set_fact:
      build_awx: "{{ _result.status <100 or _result.status > 399 }}"

  - name: Clone AWX repo
    git:
      repo: https://github.com/ansible/awx.git
      dest: /opt/awx
    failed_when: false
    when: build_awx

  - name: Configure AWX installer
    lineinfile:
      path: /opt/awx/installer/inventory
      regexp: "^#?{{ item.key }}="
      line: "{{ item.key }}={{ item.value }}"
    when: build_awx
    loop:
    - key: "awx_web_hostname"
      value: "awx"
    - key: "pg_password"
      value: "{{ lookup('password', 'pw.pg_password chars=ascii_letters,digits length=20') }}"
    - key: "rabbitmq_password"
      value: "{{ lookup('password', 'pw.rabbitmq_password chars=ascii_letters,digits length=20') }}"
    - key: "rabbitmq_erlang_cookie"
      value: "{{ lookup('password', 'pw.rabbitmq_erlang_cookie chars=ascii_letters,digits length=20') }}"
    - key: "admin_password"
      value: "{{ password_key }}"
    - key: "secret_key"
      value: "{{ lookup('password', 'pw.secret_key chars=ascii_letters,digits length=64') }}"
    - key: "create_preload_data"
      value: "False"
    loop_control:
      label: "{{ item.key }}"

  - name: Run the install
    when: build_awx
    shell: ansible-playbook -i inventory install.yml
    args:
      chdir: /opt/awx/installer

  # Based on https://gist.github.com/mikeifomin/67e233cd461331de16707ef59a07e372
  - name: Wait for AWX to be up
    uri:
      url: "http://127.0.0.1/api/"
      follow_redirects: none
      method: GET
    register: _result
    until: _result.status == 200
    retries: 240 # retry X times  
    delay: 5 # pause for X sec b/w each call

  - name: Test tower_user access
    tower_user:
      tower_host: http://127.0.0.1
      tower_verify_ssl: no
      tower_username: admin
      tower_password: "{{ password_key }}"
      username: "check_access"
      first_name: "check"
      last_name: "access"
      password: "{{ lookup('password', '/dev/null') }}"
      email: "check_access@gitlab.local"
      superuser: no
    register: _result
    until: _result.failed != True
    retries: 240 # retry X times  
    delay: 5 # pause for X sec b/w each call

  - name: Reset test
    tower_user:
      tower_host: http://127.0.0.1
      tower_verify_ssl: no
      tower_username: admin
      tower_password: "{{ password_key }}"
      username: "check_access"
      first_name: "check"
      last_name: "access"
      password: "{{ lookup('password', '/dev/null') }}"
      email: "check_access@gitlab.local"
      state: absent

  - name: Create AWX Users
    tower_user:
      tower_host: http://127.0.0.1
      tower_verify_ssl: no
      tower_username: admin
      tower_password: "{{ password_key }}"
      username: "{{ item.key }}"
      first_name: "{{ item.value }}"
      last_name: User
      password: "{{ password_key }}"
      email: "{{ item.key }}@gitlab.local"
      superuser: no
    register: _result
    failed_when: false
    loop_control:
      label: "{{ item.key }}"
    loop: "{{ users | dict2items }}"

  - name: Create AWX Organisation
    tower_organization:
      tower_host: http://127.0.0.1
      tower_verify_ssl: no
      tower_username: admin
      tower_password: "{{ password_key }}"
      name: Gitlab-AWX-Demo
      description: Gitlab-AWX-Demo
      state: present

  - name: Create AWX Team
    tower_team:
      tower_host: http://127.0.0.1
      tower_verify_ssl: no
      tower_username: admin
      tower_password: "{{ password_key }}"
      name: Gitlab-AWX-Demo
      description: Gitlab-AWX-Demo
      organization: Gitlab-AWX-Demo

  - name: Create AWX Users
    tower_role:
      tower_host: http://127.0.0.1
      tower_verify_ssl: no
      tower_username: admin
      tower_password: "{{ password_key }}"
      user: "{{ item.key }}"
      target_team: Gitlab-AWX-Demo
      role: admin
    register: _result
    failed_when: false
    loop_control:
      label: "{{ item.key }}"
    loop: "{{ users | dict2items }}"

  - name: Create AWX Credential for Gitlab
    tower_credential:
      tower_host: http://127.0.0.1
      tower_verify_ssl: no
      tower_username: admin
      tower_password: "{{ password_key }}"
      name: AWX Service Account for Gitlab
      state: present
      kind: scm
      username: awx
      password: "{{ password_key }}"
      organization: Default

  - name: Create AWX Inventory
    tower_inventory:
      tower_host: http://127.0.0.1
      tower_verify_ssl: no
      tower_username: admin
      tower_password: "{{ password_key }}"
      name: Gitlab-AWX-Demo
      organization: Gitlab-AWX-Demo

  - name: Create AWX Inventory Groups
    tower_group:
      tower_host: http://127.0.0.1
      tower_verify_ssl: no
      tower_username: admin
      tower_password: "{{ password_key }}"
      name: "{{ item }}"
      inventory: Gitlab-AWX-Demo
      instance_filters: "{{ item }}"
    loop:
    - internet
    - internal

  - name: Create AWX Inventory Hosts
    tower_host:
      tower_host: http://127.0.0.1
      tower_verify_ssl: no
      tower_username: admin
      tower_password: "{{ password_key }}"
      name: "{{ item.key }}"
      inventory: Gitlab-AWX-Demo
      variables: "{{ item.value }}"
    loop_control:
      label: "{{ item.key }}"
    loop: "{{ awx_hosts | default ({}) | dict2items }}"

  - name: Create AWX Project
    tower_project:
      tower_host: http://127.0.0.1
      tower_verify_ssl: no
      tower_username: admin
      tower_password: "{{ password_key }}"
      name: Gitlab-AWX-Demo
      organization: Gitlab-AWX-Demo
      scm_type: git
      scm_clean: yes
      scm_delete_on_update: yes
      scm_update_on_launch: yes
      scm_url: http://{{ ansible_default_ipv4.address }}:1080/default/default.git
      scm_credential: AWX Service Account for Gitlab
