---
- name: Check if AWX is up
  uri:
    url: "http://127.0.0.1"
    follow_redirects: none
    method: GET
  register: _result
  failed_when: false
  changed_when: false

- name: Record status
  set_fact:
    build_awx: "{{ _result.status <100 or _result.status > 399 }}"

- name: Clone AWX repo
  git:
    repo: https://github.com/ansible/awx.git
    dest: /opt/awx
  failed_when: false
  when: build_awx

- name: Configure AWX installer
  lineinfile:
    path: /opt/awx/installer/inventory
    regexp: "^#?{{ item.key }}="
    line: "{{ item.key }}={{ item.value }}"
  when: build_awx
  loop:
  - key: "awx_web_hostname"
    value: "awx"
  - key: "pg_password"
    value: "{{ lookup('password', 'pw.pg_password chars=ascii_letters,digits length=20') }}"
  - key: "rabbitmq_password"
    value: "{{ lookup('password', 'pw.rabbitmq_password chars=ascii_letters,digits length=20') }}"
  - key: "rabbitmq_erlang_cookie"
    value: "{{ lookup('password', 'pw.rabbitmq_erlang_cookie chars=ascii_letters,digits length=20') }}"
  - key: "admin_password"
    value: "{{ password_key }}"
  - key: "secret_key"
    value: "{{ lookup('password', 'pw.secret_key chars=ascii_letters,digits length=64') }}"
  - key: "create_preload_data"
    value: "False"
  loop_control:
    label: "{{ item.key }}"

- name: Run the install
  when: build_awx
  shell: ansible-playbook -i inventory install.yml
  args:
    chdir: /opt/awx/installer

# Based on https://gist.github.com/mikeifomin/67e233cd461331de16707ef59a07e372
- name: Wait for AWX to be up
  uri:
    url: "http://127.0.0.1/api/"
    follow_redirects: none
    method: GET
  register: _result
  until: _result.status == 200
  retries: 240 # retry X times
  delay: 5 # pause for X sec b/w each call

- name: Test tower_user access
  tower_user:
    tower_host: http://127.0.0.1
    tower_verify_ssl: no
    tower_username: admin
    tower_password: "{{ password_key }}"
    username: "check_access"
    first_name: "check"
    last_name: "access"
    password: "{{ lookup('password', '/dev/null') }}"
    email: "check_access@gitlab.local"
    superuser: no
  register: _result
  until: _result.failed != True
  retries: 240 # retry X times
  delay: 5 # pause for X sec b/w each call

- name: Reset test
  tower_user:
    tower_host: http://127.0.0.1
    tower_verify_ssl: no
    tower_username: admin
    tower_password: "{{ password_key }}"
    username: "check_access"
    first_name: "check"
    last_name: "access"
    password: "{{ lookup('password', '/dev/null') }}"
    email: "check_access@gitlab.local"
    state: absent

- name: Create AWX Users
  tower_user:
    tower_host: http://127.0.0.1
    tower_verify_ssl: no
    tower_username: admin
    tower_password: "{{ password_key }}"
    username: "{{ item.key }}"
    first_name: "{{ item.value }}"
    last_name: User
    password: "{{ password_key }}"
    email: "{{ item.key }}@gitlab.local"
    superuser: no
  register: _result
  failed_when: false
  loop_control:
    label: "{{ item.key }}"
  loop: "{{ users | dict2items }}"

- name: Create AWX Organisation
  tower_organization:
    tower_host: http://127.0.0.1
    tower_verify_ssl: no
    tower_username: admin
    tower_password: "{{ password_key }}"
    name: Gitlab-AWX-Demo
    description: Gitlab-AWX-Demo
    state: present

- name: Create AWX Team
  tower_team:
    tower_host: http://127.0.0.1
    tower_verify_ssl: no
    tower_username: admin
    tower_password: "{{ password_key }}"
    name: Gitlab-AWX-Demo
    description: Gitlab-AWX-Demo
    organization: Gitlab-AWX-Demo

- name: Create AWX Users
  tower_role:
    tower_host: http://127.0.0.1
    tower_verify_ssl: no
    tower_username: admin
    tower_password: "{{ password_key }}"
    user: "{{ item.key }}"
    target_team: Gitlab-AWX-Demo
    role: admin
  register: _result
  failed_when: false
  loop_control:
    label: "{{ item.key }}"
  loop: "{{ users | dict2items }}"

- name: Create AWX Credential for Gitlab
  tower_credential:
    tower_host: http://127.0.0.1
    tower_verify_ssl: no
    tower_username: admin
    tower_password: "{{ password_key }}"
    name: AWX Service Account for Gitlab
    state: present
    kind: scm
    username: awx
    password: "{{ password_key }}"
    organization: Default

- name: Create AWX Inventory
  tower_inventory:
    tower_host: http://127.0.0.1
    tower_verify_ssl: no
    tower_username: admin
    tower_password: "{{ password_key }}"
    name: Gitlab-AWX-Demo
    organization: Gitlab-AWX-Demo

- name: Create AWX Inventory Groups
  tower_group:
    tower_host: http://127.0.0.1
    tower_verify_ssl: no
    tower_username: admin
    tower_password: "{{ password_key }}"
    name: "{{ item }}"
    inventory: Gitlab-AWX-Demo
    instance_filters: "{{ item }}"
  loop:
  - internet
  - internal

- name: Create AWX Inventory Hosts
  tower_host:
    tower_host: http://127.0.0.1
    tower_verify_ssl: no
    tower_username: admin
    tower_password: "{{ password_key }}"
    name: "{{ item.key }}"
    inventory: Gitlab-AWX-Demo
    variables: "{{ item.value }}"
  loop_control:
    label: "{{ item.key }}"
  loop: "{{ awx_hosts | default ({}) | dict2items }}"

- name: Create AWX Project
  tower_project:
    tower_host: http://127.0.0.1
    tower_verify_ssl: no
    tower_username: admin
    tower_password: "{{ password_key }}"
    name: Gitlab-AWX-Demo
    organization: Gitlab-AWX-Demo
    scm_type: git
    scm_clean: yes
    scm_delete_on_update: yes
    scm_update_on_launch: yes
    scm_url: http://{{ ansible_default_ipv4.address }}:1080/default/default.git
    scm_credential: AWX Service Account for Gitlab
